/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_OAUTH_H_RPCGEN
#define _RPC_OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum error {
	USER_NOT_FOUND = 0,
	REQUEST_DENIED = 1,
	PERMISSION_DENIED = 2,
	TOKEN_EXPIRED = 3,
	RESOURCE_NOT_FOUND = 4,
	OPERATION_NOT_PERMITTED = 5,
	PERMISSION_GRANTED = 6,
	NO_ERROR = 7,
};
typedef enum error error;

enum operation {
	READ = 0,
	INSERT = 1,
	MODIFY = 2,
	DELETE = 3,
	EXECUTE = 4,
};
typedef enum operation operation;

struct req_auth {
	char *user_id;
};
typedef struct req_auth req_auth;

struct res_auth {
	char *auth_token;
	error err;
};
typedef struct res_auth res_auth;

struct req_acc_token {
	char *user_id;
	char *auth_token;
};
typedef struct req_acc_token req_acc_token;

struct res_acc_token {
	char *acc_token;
	char *regen_acc_token;
	int ttl;
	error err;
};
typedef struct res_acc_token res_acc_token;

struct req_val_del_act {
	operation op;
	char *resource;
	char *acc_token;
};
typedef struct req_val_del_act req_val_del_act;

struct res_val_del_act {
	error err;
};
typedef struct res_val_del_act res_val_del_act;

struct req_approve_req_token {
	char *auth_token;
};
typedef struct req_approve_req_token req_approve_req_token;

struct res_approve_req_token {
	char *auth_token;
};
typedef struct res_approve_req_token res_approve_req_token;

#define RPC_OAUTH_PROG 1
#define RPC_OAUTH_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define request_authorization 1
extern  res_auth * request_authorization_1(req_auth *, CLIENT *);
extern  res_auth * request_authorization_1_svc(req_auth *, struct svc_req *);
#define request_access_token 2
extern  res_acc_token * request_access_token_1(req_acc_token *, CLIENT *);
extern  res_acc_token * request_access_token_1_svc(req_acc_token *, struct svc_req *);
#define validate_delegated_action 3
extern  res_val_del_act * validate_delegated_action_1(req_val_del_act *, CLIENT *);
extern  res_val_del_act * validate_delegated_action_1_svc(req_val_del_act *, struct svc_req *);
#define approve_request_token 4
extern  res_approve_req_token * approve_request_token_1(req_approve_req_token *, CLIENT *);
extern  res_approve_req_token * approve_request_token_1_svc(req_approve_req_token *, struct svc_req *);
extern int rpc_oauth_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define request_authorization 1
extern  res_auth * request_authorization_1();
extern  res_auth * request_authorization_1_svc();
#define request_access_token 2
extern  res_acc_token * request_access_token_1();
extern  res_acc_token * request_access_token_1_svc();
#define validate_delegated_action 3
extern  res_val_del_act * validate_delegated_action_1();
extern  res_val_del_act * validate_delegated_action_1_svc();
#define approve_request_token 4
extern  res_approve_req_token * approve_request_token_1();
extern  res_approve_req_token * approve_request_token_1_svc();
extern int rpc_oauth_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_error (XDR *, error*);
extern  bool_t xdr_operation (XDR *, operation*);
extern  bool_t xdr_req_auth (XDR *, req_auth*);
extern  bool_t xdr_res_auth (XDR *, res_auth*);
extern  bool_t xdr_req_acc_token (XDR *, req_acc_token*);
extern  bool_t xdr_res_acc_token (XDR *, res_acc_token*);
extern  bool_t xdr_req_val_del_act (XDR *, req_val_del_act*);
extern  bool_t xdr_res_val_del_act (XDR *, res_val_del_act*);
extern  bool_t xdr_req_approve_req_token (XDR *, req_approve_req_token*);
extern  bool_t xdr_res_approve_req_token (XDR *, res_approve_req_token*);

#else /* K&R C */
extern bool_t xdr_error ();
extern bool_t xdr_operation ();
extern bool_t xdr_req_auth ();
extern bool_t xdr_res_auth ();
extern bool_t xdr_req_acc_token ();
extern bool_t xdr_res_acc_token ();
extern bool_t xdr_req_val_del_act ();
extern bool_t xdr_res_val_del_act ();
extern bool_t xdr_req_approve_req_token ();
extern bool_t xdr_res_approve_req_token ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_OAUTH_H_RPCGEN */
